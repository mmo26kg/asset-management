const { v4: uuidv4 } = require('uuid');
const { sequelize, AssetType, Category } = require('../models');
const TreeModel = require('tree-model');

// ‚öôÔ∏è D·ªÆ LI·ªÜU M·∫™U
const assetTypeData = [
    { name: 'Ti·ªÅn m·∫∑t', description: 'Ti·ªÅn m·∫∑t l√† c√°c kho·∫£n ti·ªÅn c√≥ th·ªÉ s·ª≠ d·ª•ng ngay' },
    { name: 'ƒê·∫ßu t∆∞', description: 'C√°c kho·∫£n ƒë·∫ßu t∆∞ v·ªõi m·ª•c ti√™u sinh l·ªùi' },
    { name: 'T√†i s·∫£n', description: 'Nh·ªØng th·ª© b·∫°n s·ªü h·ªØu c√≥ gi√° tr·ªã' },
    { name: 'Ph·∫£i tr·∫£', description: 'C√°c kho·∫£n n·ª£ v√† nghƒ©a v·ª• t√†i ch√≠nh' },
    { name: 'Ph·∫£i thu', description: 'C√°c kho·∫£n ti·ªÅn c√≥ quy·ªÅn nh·∫≠n t·ª´ ng∆∞·ªùi kh√°c' }
];

const categoryTreeData = {
    'Ti·ªÅn m·∫∑t': {
        'Ti·ªÅn m·∫∑t trong t√†i kho·∫£n ng√¢n h√†ng': {
            'Ti·ªÅn g·ª≠i thanh to√°n': null,
            'Ti·ªÅn g·ª≠i ti·∫øt ki·ªám': null
        },
        'Ti·ªÅn m·∫∑t trong v√≠': {
            'Ti·ªÅn m·∫∑t t·∫°i nh√†': null,
            'Ti·ªÅn m·∫∑t trong v√≠ ƒëi·ªán t·ª≠': null
        },
        'Ti·ªÅn m·∫∑t trong qu·ªπ ƒë·∫ßu t∆∞ ng·∫Øn h·∫°n': null
    },
    'ƒê·∫ßu t∆∞': {
        'Ch·ª©ng kho√°n': {
            'C·ªï phi·∫øu': null,
            'Tr√°i phi·∫øu': null,
            'Qu·ªπ ƒë·∫ßu t∆∞': null,
            'Ch·ª©ng quy·ªÅn': null
        },
        'B·∫•t ƒë·ªông s·∫£n ƒë·∫ßu t∆∞': {
            'Nh√† cho thu√™': null,
            'ƒê·∫•t ƒëai': null
        },
        'ƒê·∫ßu t∆∞ m·∫°o hi·ªÉm': {
            'C√°c startup': null,
            'Qu·ªπ ƒë·∫ßu t∆∞ m·∫°o hi·ªÉm': null
        },
        'ƒê·∫ßu t∆∞ d√†i h·∫°n': {
            'Qu·ªπ h∆∞u tr√≠': null,
            'V√†ng, b·∫°c, kim lo·∫°i qu√Ω': null,
            'Ti·ªÅn m√£ h√≥a': null
        }
    },
    'T√†i s·∫£n': {
        'T√†i s·∫£n v·∫≠t ch·∫•t': {
            'Nh√† ·ªü': null,
            'Xe c·ªô': null,
            'Trang thi·∫øt b·ªã gia ƒë√¨nh': null,
            'C√°c thi·∫øt b·ªã chuy√™n d·ª•ng': null
        },
        'T√†i s·∫£n v√¥ h√¨nh': {
            'B·∫±ng s√°ng ch·∫ø': null,
            'Th∆∞∆°ng hi·ªáu': null,
            'Quy·ªÅn s·ªü h·ªØu tr√≠ tu·ªá': null
        },
        'T√†i s·∫£n kh√°c': {
            'B·ªô s∆∞u t·∫≠p ngh·ªá thu·∫≠t': null,
            'S∆∞u t·∫≠p ƒë·ªì c·ªï': null,
            'B·ªô s∆∞u t·∫≠p tem, ƒë·ªìng ti·ªÅn': null
        }
    },
    'Ph·∫£i tr·∫£': {
        'N·ª£ ng·∫Øn h·∫°n': {
            'N·ª£ th·∫ª t√≠n d·ª•ng': null,
            'C√°c kho·∫£n vay ti√™u d√πng': null,
            'C√°c kho·∫£n vay mua s·∫Øm': null
        },
        'N·ª£ d√†i h·∫°n': {
            'Vay mua nh√†': null,
            'Vay sinh vi√™n': null,
            'Vay kinh doanh': null
        },
        'Nghƒ©a v·ª• kh√°c': {
            'Ti·ªÅn thu√™ nh√† ch∆∞a tr·∫£': null,
            'Ti·ªÅn thu·∫ø ch∆∞a tr·∫£': null,
            'Ph√≠ b·∫£o hi·ªÉm ch∆∞a thanh to√°n': null
        }
    },
    'Ph·∫£i thu': {
        'Ph·∫£i thu t·ª´ kh√°ch h√†ng': {
            'C√°c kho·∫£n ti·ªÅn t·ª´ b√°n h√†ng': null,
            'C√°c kho·∫£n ti·ªÅn t·ª´ d·ªãch v·ª• ƒë√£ cung c·∫•p': null
        },
        'Ph·∫£i thu t·ª´ b·∫°n b√®, ng∆∞·ªùi th√¢n': {
            'C√°c kho·∫£n m∆∞·ª£n t·ª´ b·∫°n b√®, gia ƒë√¨nh': null,
            'C√°c kho·∫£n vay c√° nh√¢n ch∆∞a thu': null
        },
        'Ph·∫£i thu t·ª´ h·ª£p ƒë·ªìng': {
            'Ti·ªÅn thu√™ nh√† ch∆∞a thu': null,
            'C√°c kho·∫£n n·ª£ t·ª´ h·ª£p ƒë·ªìng kinh doanh': null
        }
    }
};

exports.createSampleData = async () => {
    try {
        await sequelize.authenticate();
        console.log('‚úÖ K·∫øt n·ªëi DB th√†nh c√¥ng!');

        // X√≥a d·ªØ li·ªáu c≈©
        await Promise.all([
            Category.destroy({ where: {}, truncate: true }),
            AssetType.destroy({ where: {}, truncate: true })
        ]);

        // T·∫°o AssetType v√† Category
        for (const { name: assetTypeName, description } of assetTypeData) {
            const assetType = await AssetType.create({ id: uuidv4(), name: assetTypeName, description });
            console.log('üîπ ƒê√£ t·∫°o AssetType:', assetType.name);

            const categoryTree = categoryTreeData[assetTypeName];
            if (categoryTree) {
                await createCategoryTree(categoryTree, assetType.id, null);
            }
        }

        console.log('‚úÖ ƒê√£ ho√†n th√†nh vi·ªác t·∫°o c√¢y d·ªØ li·ªáu AssetType v√† Category!');
    } catch (error) {
        console.error('‚ùå ƒê√£ x·∫£y ra l·ªói:', error.message);
    }
};

async function createCategoryTree(tree, assetTypeId = null, parentId = null) {
    for (const [name, children] of Object.entries(tree)) {
        // ƒê·∫£m b·∫£o logic ch·ªâ c√≥ th·ªÉ c√≥ 1 trong 2: parentId ho·∫∑c assetTypeId
        const category = await Category.create({
            id: uuidv4(),
            name,
            assetTypeId: parentId ? null : assetTypeId,
            parentId: parentId ?? null
        });
        console.log('üìÅ T·∫°o danh m·ª•c:', category.name, 'üîó ParentID:', parentId, 'üîó AssetTypeID:', assetTypeId);

        if (children && typeof children === 'object') {
            await createCategoryTree(children, null, category.id);
        }
    }
}

exports.getAssetTypeCategoryTree = async () => {
    try {
        await sequelize.authenticate();
        console.log('‚úÖ K·∫øt n·ªëi DB th√†nh c√¥ng!');

        const [assetTypes, categories] = await Promise.all([
            AssetType.findAll({ raw: true }),
            Category.findAll({ raw: true })
        ]);

        const tree = new TreeModel();

        // T·∫°o c√¢y cho t·ª´ng AssetType
        const assetTypeTrees = assetTypes.map(assetType => {
            const root = tree.parse({
                id: assetType.id,
                name: assetType.name,
                description: assetType.description,
                type: 'AssetType',
                children: []  // Danh s√°ch Category s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y
            });

            // L·ªçc c√°c Category li√™n quan ƒë·∫øn AssetType hi·ªán t·∫°i
            const relatedCategories = categories.filter(cat => cat.assetTypeId === assetType.id);

            // X√¢y d·ª±ng c√¢y cho c√°c Category li√™n quan
            buildCategoryTree(root, relatedCategories);

            return root;
        });

        console.log('üå≥ C√¢y AssetType v√† Category ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');

        // In ra c√¢y d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
        assetTypeTrees.forEach(root => {
            console.log('\nüå≥ ƒê√¢y l√† c√¢y c·ªßa AssetType:', root.model.name);
            console.log(JSON.stringify(root.model, null, 2));
        });

        return assetTypeTrees;
    } catch (error) {
        console.error('‚ùå ƒê√£ x·∫£y ra l·ªói:', error.message);
    }
};

function buildCategoryTree(parentNode, categories) {
    // L·ªçc c√°c danh m·ª•c con c·ªßa Category hi·ªán t·∫°i
    const childCategories = categories.filter(cat => cat.parentId === parentNode.model.id);

    childCategories.forEach(child => {
        // T·∫°o m·ªôt node cho Category con
        const childNode = parentNode.addChild({
            id: child.id,
            name: child.name,
            type: 'Category',
            parentId: child.parentId,
            assetTypeId: child.assetTypeId,
            children: []
        });

        // Ti·∫øp t·ª•c x√¢y d·ª±ng c√¢y cho Category con
        buildCategoryTree(childNode, categories);
    });
}